<template>
  <el-form
    v-loading="$store.state.loading.isShow"
    @submit.prevent="handleSubmitForm"
    :model="form"
    label-position="top"
    ref="REF_FORM"
    class="detail-wrap"
  >
    <div class="detail w-100">
      <div class="card mb-3">
        <div class="card-header">
          \{{ $i18n.global.t('Util.edit') }}
        </div>
        <div class="card-body d-lg-flex flex-wrap">
          {{#each form}}
          <el-form-item
            :label="$i18n.global.t(inputForm.{{this.key}}.label)"
            :prop="inputForm.{{this.key}}.id"
            :rules="inputForm.{{this.key}}.rules"
            {{#if this.spec.memo}}
            class="col-12 px-2"
            {{else}}
            class="col-lg-6 col-xl-4 px-2"
            {{/if}}
          >
            {{> inputPartial}}
          </el-form-item>
          {{/each}}
        </div>
      </div>
    </div>
  </el-form>
</template>

<script lang='ts'>
import { reactive, toRefs, onMounted, defineComponent } from 'vue';
import Modify from './Service/Modify';
import inputForm from './form';
import { utilTools } from '@/modules/FPKG-20000-Util/prototypes/utilTools';
import DoModify from './Service/DoModify';
import ELFORM from '@/modules/FPKG-20000-Util/API/elForm/index';
import { useRouter } from 'vue-router';

export default defineComponent({
  name: '{{dashCase BASE_NAME}}--Modify',
  props: ['{{key}}'],
  setup(props) {
    const { proxy, backToList } = utilTools();
    const $router = useRouter();
    const { REF_FORM, submitForm } = ELFORM();
    const data = reactive({
      form: {} as any,
    });

    /**
     * getInfo 取得資料
     */
    const getInfo = async () => {
      const { {{key}} } = props;
      if (!{{key}}) return;
      const getter = await Modify({ {{~key~}} });
      if (getter) data.form = getter;
    };

    /** 送出表單 */
    const handleSubmitForm = async () => {
      await submitForm();
      const getter = await DoModify(data.form);
      if(getter) {
        backToList();
      }
    };

    onMounted(() => {
      proxy.$bus.$on('info', () => {
        $router.push(
          `/{{BASE}}/info/${props.{{~key~}} }`,
        );
      });
      proxy.$bus.$on('save', () => {
        handleSubmitForm();
      });
      getInfo();
    });

    const refData = toRefs(data);

    return {
      ...refData,
      REF_FORM,
      handleSubmitForm,
      inputForm,
    };
  },
});
</script>
